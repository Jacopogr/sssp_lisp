(defparameter *vertices* (make-hash-table :test #'equal))
(defparameter *graphs* (make-hash-table :test #'equal))
(defparameter *edges* (make-hash-table :test #'equal))

(defun is-graph (graph-id)
  (cond ((or (not (atom graph-id)) (null graph-id))
       (error "Il grafo ~a non e' un atomo o è nullo." graph-id)))
  (gethash graph-id *graphs*))

(defun new-graph (graph-id)
  (cond ((or (not (atom graph-id)) (null graph-id))
    (error "Il grafo ~a non e' un atomo o è nullo." graph-id)))
  (or (gethash graph-id *graphs*)
  (setf (gethash graph-id *graphs*) graph-id))) 

(defun delete-graph (graph-id) 
  (cond ((not (is-graph graph-id))
        (error "Il grafo ~a non esiste." graph-id))) 
  (remhash graph-id *graphs*)
  (maphash (lambda (k v) 
             (when (and (eq (second k) graph-id))
               (remhash k *vertices*))) 
           *vertices*)
  (maphash (lambda (k v) 
             (when (and (eq (second k) graph-id))
               (remhash k *edges*))) 
           *edges*)
  nil)

(defun new-vertex (graph-id vertex-id)
  (cond ((not (is-graph graph-id))
          (error "Il grafo ~a non esiste." graph-id))
      ((or (not (atom vertex-id)) (null vertex-id))
        (error "Il vertex-id ~a non e' un atomo o è nullo." vertex-id)))
    (setf (gethash (list 'vertex graph-id vertex-id) *vertices*)
    (list 'vertex graph-id vertex-id)))

(defun graph-vertices (graph-id)
(cond ((not (is-graph graph-id))
        (error "Il grafo ~a non esiste." graph-id)))
  (let ((vertices ()))
    (maphash (lambda (k v) 
               (when (and (eq (first k) 'vertex) (eq (second k) graph-id))
                 (push v vertices))) 
             *vertices*)
    vertices))

(defun new-edge (graph-id vertex-id1 vertex-id2 &optional (weight 1))
  (cond ((not (is-graph graph-id))
          (error "Il grafo ~a non esiste." graph-id))
        ((not (gethash (list 'vertex graph-id vertex-id1) *vertices*)) 
          (error "Il vertice ~a non esiste." vertex-id1))
        ((not (gethash (list 'vertex graph-id vertex-id2) *vertices*)) 
          (error "Il vertice ~a non esiste." vertex-id2))
        ((gethash (list graph-id vertex-id1 vertex-id2) *edges*)
          (error "L'arco ~a -> ~a esiste gia'." source-vertex-id dest-vertex-id)))
  (setf (gethash (list 'edge graph-id vertex-id1 vertex-id2 weight) *edges*)
    (list 'edge graph-id vertex-id1 vertex-id2 weight)))

(defun graph-edges (graph-id)
(cond ((not (is-graph graph-id))
        (error "Il grafo ~a non esiste." graph-id)))
  (let ((edges ()))
    (maphash (lambda (k v) 
               (when (and (eq (first k) 'edge) (eq (second k) graph-id))
                 (push v edges))) 
             *edges*)
    edges))

(defun graph-vertex-neighbors (graph-id vertex-id)
(cond ((not (is-graph graph-id))
        (error "Il grafo ~a non esiste." graph-id))
      ((not (gethash (list 'vertex graph-id vertex-id) *vertices*))
        (error "Il vertice ~a non esiste." vertex-id)))
  (let ((vertex-rep-list ()))
    (maphash (lambda (k v) 
               (when (and (eq (first k) 'edge) (eq (second k) graph-id) (eq (third k) vertex-id))
                 (push (list 'edge graph-id vertex-id (fourth k) (fifth k)) vertex-rep-list))) 
             *edges*)
    vertex-rep-list))

(defun graph-print (graph-id)
(cond ((not (is-graph graph-id))
        (error "Il grafo ~a non esiste." graph-id)))
  (format t "Vertici del grafo ~a: ~a~%" graph-id (graph-vertices graph-id))
  (format t "Archi del grafo ~a: ~a~%" graph-id (graph-edges graph-id))
  t)  
